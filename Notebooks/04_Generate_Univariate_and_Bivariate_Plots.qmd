---
title: "Univariate and Bivariate Plotting"
author: "Brennan Hickson"
format: html
editor: visual
---

# Install and Load Libraries

```{r Initial Setup and Library Loading, echo = FALSE}
# Load the pacman package (install if necessary)
if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}

# Install and load prerequisite libraries
pacman::p_load(extrafont, ggridges, here, tidyverse)

# Create the 'Data/Processed' subdirectory if not already accessible
data_processed_dir <- here("Data", "Processed")
if (!dir.exists(data_processed_dir)) {
  dir.create(data_processed_dir, recursive = TRUE)
}

# Create the 'Output/Plots/Univariate_and_Bivariate_Plots' subdirectory if not already available
univariate_and_bivariate_plots_dir <- here("Output", "Plots", "Univariate_and_Bivariate_plots")
if (!dir.exists(univariate_and_bivariate_plots_dir)) {
  dir.create(univariate_and_bivariate_plots_dir, recursive = TRUE)
}

# Load the .rds files
# analytic_data_imputed <- readRDS(file.path(data_processed_dir, "analytic_data_imputed.rds"))
analytic_data_final <- readRDS(file.path(data_processed_dir, "analytic_data_final.rds"))
complete_cases_all <- readRDS(file.path(data_processed_dir, "complete_cases_all_final.rds"))
complete_cases_select <- readRDS(file.path(data_processed_dir, "complete_cases_select_final.rds"))

# Import fonts from Font Book
loadfonts(device = "all", quiet = TRUE)
```

# Plots

```{r Create Custom Theme}
# Create custom theme
customization <- theme(
  title = element_text(family = "Proxima Nova", face = "bold", size = 20),
  legend.title = element_text(family = "Proxima Nova", face = "bold", size = 10),
  legend.text = element_text(family = "Proxima Nova", size = 9.5),
  axis.title.x = element_text(family = "Proxima Nova", face = "bold", size = 12, margin = margin(t = 10)),
  axis.title.y = element_text(family = "Proxima Nova", face = "bold", size = 12, margin = margin(r = 10)),
  axis.text = element_text(family = "Proxima Nova", size = 10),
  text = element_text(family = "Proxima Nova"),
  legend.position = "top"
)
```

### Figure 1-1 and Figure 1-2: Counts and Percentages of Censored vs. Expired Participants by Depression Level at Year 1

```{r Plot Figure 1-1 (Final Analytic Sample)}
# Create the counts plot
# Filter out NA values in 'event_status'
vital_status_by_depression_data <- analytic_data_final |>
  drop_na(event_status)

# Calculate the counts for each depression level group
count_data_vital_status <- vital_status_by_depression_data |>
  count(depression_level_at_year_1, event_status)

# Create the event status by depression level plot
gg.vital_status_by_depression <- ggplot(vital_status_by_depression_data,
                                        aes(x = depression_level_at_year_1,
                                            fill = event_status)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(labels = c("Censored", "Expired"),
                    values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(data = count_data_vital_status,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Vital Status") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1500, by = 250)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
    legend.margin = margin(t = 0, r = 0, b = 0, l = 0),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-1_vital_status_by_depression_final_analytic_sample.png"),
       gg.vital_status_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-1 (Complete-Case Sample)}
# Create the counts plot
# Filter out missing values in 'event_status' to ensure a clean dataset
vital_status_by_depression_data <- complete_cases_select |>
  drop_na(event_status)

# Count the number of occurrences for each depression level and vital status
count_data_vital_status <- vital_status_by_depression_data |>
  count(depression_level_at_year_1, event_status)

# Create a bar plot for counts by depression level and vital status
gg.vital_status_by_depression <- ggplot(vital_status_by_depression_data,
                                        aes(x = depression_level_at_year_1,
                                            fill = event_status)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(labels = c("Censored", "Expired"),
                    values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(data = count_data_vital_status,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Vital Status") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1000, by = 100)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
    legend.margin = margin(t = 0, r = 0, b = 0, l = 0),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-1_vital_status_by_depression_complete_case_sample.png"),
       gg.vital_status_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-2 (Final Analytic Sample)}
# Prepare the data for plotting
mortality_plot_pct_data <- analytic_data_final |>
  drop_na(event_status) |>
  count(depression_level_at_year_1, event_status) |>
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Plot the aggregated count of 'event_status' for each 'depression_level_at_year_1'
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = depression_level_at_year_1,
                               y = pct,
                               fill = factor(event_status))) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(labels = c("Censored", "Expired"),
                    values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF", 
                      "#0C1011", "#FFFFFF", 
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  xlab("Depression Level at Year 1") +
  ylab("Percentage") +
  labs(fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-2_vital_status_pct_final_analytic_sample.png"),
       gg.mortality_pct, dpi = 300)
```

```{r Plot Figure 1-2 (Complete-Case Sample)}
# Prepare the data for plotting by calculating percentages
mortality_plot_pct_data <- complete_cases_select |>
  drop_na(event_status) |>
  count(depression_level_at_year_1, event_status) |>
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create a bar plot for percentages
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = depression_level_at_year_1,
                               y = pct,
                               fill = factor(event_status))) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(labels = c("Censored", "Expired"),
                    values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  xlab("Depression Level at Year 1") +
  ylab("Percentage") +
  labs(fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-2_vital_status_pct_complete_case_sample.png"),
       gg.mortality_pct, dpi = 300)
```

### Figure 1-3 and Figure 1-4: Counts and Percentages of Expired Participants by Depression Level at Year 1 and Age Group

```{r Plot Figure 1-3 (Final Analytic Sample)}
# Create age groups
analytic_data_final <- analytic_data_final |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, max(age_at_injury, na.rm = TRUE), by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, max(age_at_injury, na.rm = TRUE) - 10, by = 10),
                                        seq(16 + 9, max(age_at_injury, na.rm = TRUE), by = 10), sep = "-")))

# Filter data to include only relevant columns and remove NAs
data_filtered <- analytic_data_final |>
  drop_na(depression_level_at_year_1, age_group, event_status)

# Calculate the counts for each age group and depression level at year 1 where event_status is 1 (Expired)
count_data_expired <- data_filtered |>
  filter(event_status == "Expired") |>
  count(age_group, depression_level_at_year_1)

# Create the death by age group and depression level plot
gg.death_by_age_depression <- ggplot(data_filtered |> filter(event_status == "Expired"),
                                     aes(x = age_group,
                                         fill = depression_level_at_year_1)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No Depression" = "#CFD8DC", 
                               "Minor Depression" = "#546E7A", 
                               "Major Depression" = "#37474F")) +
  geom_text(data = count_data_expired,
            aes(y = n / 2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,
            color = c("#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF")) +
  labs(x = "Age Group", y = "Count of Expired Participants", fill = "Depression Level at Year 1") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 60, by = 5)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-3_death_by_age_depression_final_analytic_sample.png"),
       gg.death_by_age_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-3 (Complete-Case Sample)}
# Create age groups
complete_cases_select <- complete_cases_select |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, max(age_at_injury, na.rm = TRUE), by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, max(age_at_injury, na.rm = TRUE) - 10, by = 10),
                                        seq(16 + 9, max(age_at_injury, na.rm = TRUE), by = 10), sep = "-")))

# Filter data to include only relevant columns and remove NAs
data_filtered <- complete_cases_select |>
  drop_na(depression_level_at_year_1, age_group, event_status)

# Calculate the counts for each age group and depression level at year 1 where event_status is 1 (Expired)
count_data_expired <- data_filtered |>
  filter(event_status == "Expired") |>
  count(age_group, depression_level_at_year_1)

# Create the death by age group and depression level plot
gg.death_by_age_depression <- ggplot(data_filtered |> filter(event_status == "Expired"),
                                     aes(x = age_group,
                                         fill = depression_level_at_year_1)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No Depression" = "#CFD8DC", 
                               "Minor Depression" = "#546E7A", 
                               "Major Depression" = "#37474F")) +
  geom_text(data = count_data_expired,
            aes(y = n / 2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,
            color = c("#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF")) +
  labs(x = "Age Group", y = "Count of Expired Participants", fill = "Depression Level at Year 1") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 50, by = 5)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-3_death_by_age_depression_complete_case_sample.png"),
       gg.death_by_age_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-4 (Final Analytic Sample)}
# Ensure 'age_at_injury' is numeric and create age groups in the same mutate call
analytic_data_final <- analytic_data_final |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, 99, by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, 89, by = 10),
                                        seq(25, 99, by = 10), sep = "-")),
         depression_level_at_year_1 = factor(depression_level_at_year_1, levels = c("No Depression", "Minor Depression", "Major Depression")))

# Prepare the data for plotting
mortality_plot_pct_data <- analytic_data_final |>
  drop_na(event_status) |>
  count(age_group, depression_level_at_year_1, event_status) |>
  group_by(age_group, depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Plot the aggregated percentage of 'event_status' for each 'age_group' and 'depression_level_at_year_1'
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = age_group,
                               y = pct,
                               fill = event_status)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2,
            color = c("#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#0C1011", "#FFFFFF",
                      "#FFFFFF")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  labs(x = "Age Group", y = "Percentage of Participants", fill = "Vital Status") +
  facet_wrap(~ depression_level_at_year_1, ncol = 1) +  # Create a separate panel for each depression level
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-4_mortality_pct_by_age_and_depression_final_analytic_sample.png"),
       gg.mortality_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-4 (Complete-Case Sample)}
# Ensure 'age_at_injury' is numeric and create age groups in the same mutate call
complete_cases_select <- complete_cases_select |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, 96, by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, 86, by = 10),
                                        seq(25, 95, by = 10), sep = "-")),
         depression_level_at_year_1 = factor(depression_level_at_year_1, levels = c("No Depression", "Minor Depression", "Major Depression")))

# Prepare the data for plotting
mortality_plot_pct_data <- complete_cases_select |>
  drop_na(event_status) |>
  count(age_group, depression_level_at_year_1, event_status) |>
  group_by(age_group, depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Plot the aggregated percentage of 'event_status' for each 'age_group' and 'depression_level_at_year_1'
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = age_group,
                               y = pct,
                               fill = event_status)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.25,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011",
                      "#FFFFFF", "#0C1011")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  labs(x = "Age Group", y = "Percentage of Participants", fill = "Vital Status") +
  facet_wrap(~ depression_level_at_year_1, ncol = 1) +  # Create a separate panel for each depression level
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-4_mortality_pct_by_age_and_depression_complete_case_sample.png"),
       gg.mortality_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-5 (Final Analytic Sample)}
# Ensure 'age_at_injury' is numeric and create age groups in the same mutate call
analytic_data_final <- analytic_data_final |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, 99, by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, 89, by = 10),
                                        seq(25, 99, by = 10), sep = "-")),
         depression_level_at_year_1 = factor(depression_level_at_year_1, levels = c("No Depression", "Minor Depression", "Major Depression")))

# Prepare the data for plotting
mortality_plot_pct_data <- analytic_data_final |>
  drop_na(event_status) |>
  count(age_group, event_status) |>
  group_by(age_group) |>
  mutate(pct = n / sum(n) * 100)

# Create the plot
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = age_group,
                               y = pct,
                               fill = event_status)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 1.75,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#FFFFFF")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  labs(x = "Age Group", y = "Percentage of Participants", fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-5_mortality_pct_by_age_group_final_analytic_sample.png"),
       gg.mortality_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 1-5 (Complete-Case Sample)}
# Ensure 'age_at_injury' is numeric and create age groups in the same mutate call
complete_cases_select <- complete_cases_select |>
  mutate(age_at_injury = as.numeric(as.character(age_at_injury)),
         age_group = cut(age_at_injury, breaks = seq(16, 96, by = 10),
                         right = FALSE, include.lowest = TRUE,
                         labels = paste(seq(16, 86, by = 10),
                                        seq(25, 95, by = 10), sep = "-")),
         depression_level_at_year_1 = factor(depression_level_at_year_1, levels = c("No Depression", "Minor Depression", "Major Depression")))

# Prepare the data for plotting by calculating percentages
mortality_plot_pct_data <- complete_cases_select |>
  drop_na(event_status) |>
  count(age_group, event_status) |>
  group_by(age_group) |>
  mutate(pct = n / sum(n) * 100)

# Create the plot
gg.mortality_pct <- ggplot(mortality_plot_pct_data,
                           aes(x = age_group,
                               y = pct,
                               fill = event_status)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#263238", linewidth = 0.75) +  # Position percentage bars side-by-side
  scale_fill_manual(values = c("Censored" = "#CFD8DC",
                               "Expired" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 20%
  labs(x = "Age Group", y = "Percentage of Participants", fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_1-5_mortality_pct_by_age_group_complete_case_sample.png"),
       gg.mortality_pct, bg = "#FFFFFF", dpi = 300)
```

### Figures 2-0, 2-1, and 2-2: Age Distributions of Overall Sample and by Sex and Depression Level at Year 1

```{r Plot Figure 2-0 (Final Analytic Sample)}
# Prepare the data for plotting
age_data <- analytic_data_final |>
  drop_na(age_at_injury)

gg.age_distribution <- ggplot(age_data, 
                              aes(x = age_at_injury)) +
  # geom_density(alpha = 0.8, size = 0.75) +
  geom_histogram(binwidth = 5.5, fill = "#37474F", color = "#263238", alpha = 0.8, linewidth = 1) +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  labs(x = "Age at Injury", y = "Frequency", title = "Distribution of Age at Injury") +
  theme_classic() + 
  customization

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-0_age_distribution_final_analytic_sample.png"),
       gg.age_distribution, dpi = 300)
```

```{r Plot Figure 2-0 (Complete-Case Sample)}
# Prepare the data for plotting
age_data <- complete_cases_select |>
  drop_na(age_at_injury)

gg.age_distribution <- ggplot(age_data, 
                              aes(x = age_at_injury)) +
  # geom_density(alpha = 0.8, size = 0.75) +
  geom_histogram(binwidth = 5.5, fill = "#37474F", color = "#263238", alpha = 0.8, linewidth = 1) +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  labs(x = "Age at Injury", y = "Frequency", title = "Distribution of Age at Injury") +
  theme_classic() + 
  customization

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-0_age_distribution_complete_case_sample.png"),
       gg.age_distribution, dpi = 300)
```

```{r Plot Figure 2-1 (Final Analytic Sample)}
# Plot of age distribution by sex
# Prepare the data for plotting
age_by_sex_plot_data <- analytic_data_final |>
  drop_na(age_at_injury, sex)

# Step 2: Create the age distribution by sex plot
gg.age_distribution_by_sex <- ggplot(age_by_sex_plot_data,
                                     aes(x = age_at_injury,
                                         fill = sex,
                                         color = sex)) +
  geom_density(alpha = 0.8, linewidth = 0.75) +
  scale_fill_manual(values = c("#62D9F0", "#F06292"), name = "Sex") +
  scale_color_manual(values = c("#0277BD", "#C2185B"), name = "Sex") +  # Specify border colors
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  xlab("Age at Injury (years)") +
  ylab("Distribution Density") +
  labs(fill = "Sex") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
    )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-1_age_distribution_by_sex_final_analytic_sample.png"),
       gg.age_distribution_by_sex, dpi = 300)
```

```{r Plot Figure 2-1 (Complete-Case Sample)}
# Plot of age distribution by sex
# Prepare the data for plotting (using the entire dataset, not just the final observation)
age_by_sex_plot_data <- complete_cases_select |>
  drop_na(age_at_injury, sex)

# Step 2: Create the age distribution by sex plot
gg.age_distribution_by_sex <- ggplot(age_by_sex_plot_data,
                                     aes(x = age_at_injury,
                                         fill = sex,
                                         color = sex)) +
  geom_density(alpha = 0.8, linewidth = 0.75) +
  scale_fill_manual(values = c("#62D9F0", "#F06292"), name = "Sex") +
  scale_color_manual(values = c("#0277BD", "#C2185B"), name = "Sex") +  # Specify border colors
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  xlab("Age at Injury (years)") +
  ylab("Distribution Density") +
  labs(fill = "Sex") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
    )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-1_age_distribution_by_sex_complete_case_sample.png"),
       gg.age_distribution_by_sex, dpi = 300)
```

```{r Plot Figure 2-2 (Final Analytic Sample)}
# Plot of age distribution by vital status
# Prepare the data for plotting (using the entire dataset, not just the final observation)
age_by_vital_status_plot_data <- analytic_data_final |>
  drop_na(age_at_injury, event_status)

# Step 2: Create the age distribution by sex plot
gg.age_distribution_by_vital_status <- ggplot(age_by_vital_status_plot_data,
                                              aes(x = age_at_injury,
                                                  fill = event_status,
                                                  color = event_status,
                                                  group = event_status)) +
  geom_density(alpha = 0.8, size = 0.75) +
  scale_fill_manual(values = c("Censored" = "#CFD8DC", "Expired" = "#37474F"),
                    name = "Vital Status") +
  scale_color_manual(values = c("Censored" = "#91979a", "Expired" = "#273237"),
                     name = "Vital Status") +  # Specify border colors
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  xlab("Age at Injury (years)") +
  ylab("Distribution Density") +
  labs(fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
    )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-2_age_distribution_by_vital_status_final_analytic_sample.png"),
       gg.age_distribution_by_vital_status, dpi = 300)
```

```{r Plot Figure 2-2 (Complete-Case Sample)}
# Plot of age distribution by vital status
age_by_vital_status_plot_data <- complete_cases_select |>
  drop_na(age_at_injury, event_status)

# Step 2: Create the age distribution by sex plot
gg.age_distribution_by_vital_status <- ggplot(age_by_vital_status_plot_data,
                                              aes(x = age_at_injury,
                                                  fill = event_status,
                                                  color = event_status,
                                                  group = event_status)) +
  geom_density(alpha = 0.8, size = 0.75) +
  scale_fill_manual(values = c("Censored" = "#CFD8DC", "Expired" = "#37474F"),
                    name = "Vital Status") +
  scale_color_manual(values = c("Censored" = "#91979a", "Expired" = "#273237"),
                     name = "Vital Status") +  # Specify border colors
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +  # Custom x-axis tick marks
  xlab("Age at Injury (years)") +
  ylab("Distribution Density") +
  labs(fill = "Vital Status") +
  theme_classic() +
  customization +
  theme(
    legend.position = "right",
    legend.justification = "right",
    legend.box.just = "right"
    )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-2_age_distribution_by_vital_status_complete_case_sample.png"),
       gg.age_distribution_by_vital_status, dpi = 300)
```

```{r Plot Figure 2-3 (Final Analytic Sample)}
# Create the age distribution by depression plot
gg.age_at_injury_by_depression <- ggplot(analytic_data_final,
                                            aes(
                                              x = age_at_injury, 
                                              y = depression_level_at_year_1,
                                              fill = depression_level_at_year_1,
                                              color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Age at Injury (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-3_age_at_injury_by_depression_final_analytic_sample.png"),
       gg.age_at_injury_by_depression, dpi = 300)
```

```{r Plot Figure 2-3 (Complete-Case Sample)}
# Create age distribution by depression level plot
gg.age_at_injury_by_depression <- ggplot(complete_cases_select,
                                            aes(
                                              x = age_at_injury, 
                                              y = depression_level_at_year_1,
                                              fill = depression_level_at_year_1,
                                              color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Age at Injury (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-3_age_at_injury_by_depression_complete_case_sample.png"),
       gg.age_at_injury_by_depression, dpi = 300)
```

```{r Plot Figure 2-4 (Final Analytic Sample)}
# Create age distribution by depression level plot
gg.age_at_expiration_by_depression <- ggplot(analytic_data_final,
                                            aes(
                                              x = age_at_expiration, 
                                              y = depression_level_at_year_1,
                                              fill = depression_level_at_year_1,
                                              color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Age at Expiration (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-4_age_at_expiration_by_depression_final_analytic_sample.png"),
       gg.age_at_expiration_by_depression, dpi = 300)
```

```{r Plot Figure 2-4 (Complete-Case Sample)}
# Perform a left join to append age_at_expiration from analytic_data_final
complete_cases_select <- complete_cases_select |>
  left_join(analytic_data_final |>
              select(id, age_at_expiration), by = "id")

# Create age distribution by depression level plot
gg.age_at_expiration_by_depression <- ggplot(complete_cases_select,
                                            aes(
                                              x = age_at_expiration, 
                                              y = depression_level_at_year_1,
                                              fill = depression_level_at_year_1,
                                              color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Age at Expiration (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(15, 100, by = 10)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_2-4_age_at_expiration_by_depression_complete_case_sample.png"),
       gg.age_at_expiration_by_depression, dpi = 300)
```

### Figure 3-1: Educational Attainment at Injury by Depression Level at Year 1

```{r Plot Figure 3-1 (Final Analytic Sample)}
# Create the education distribution by depression plot
gg.education_by_depression <- ggplot(analytic_data_final,
                                     aes(x = education_level_at_injury,
                                         y = depression_level_at_year_1,
                                         fill = depression_level_at_year_1,
                                         color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Educational Attainment at Injury (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(0, 25, by = 2)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_3-1_education_distribution_by_depression_final_analytic_sample.png"),
       gg.education_by_depression, dpi = 300)
```

```{r Plot Figure 3-1 (Complete-Case Sample)}
# Create the education distribution by depression plot
gg.education_by_depression <- ggplot(complete_cases_select,
                                     aes(x = education_level_at_injury,
                                         y = depression_level_at_year_1,
                                         fill = depression_level_at_year_1,
                                         color = depression_level_at_year_1)) +
  geom_density_ridges(linetype = 1,
                      linewidth = 0.75) +
  scale_fill_manual(values = c("#CFD8DC", "#546E7A", "#37474F"), name = "Depression Level at Year 1") +
  scale_color_manual(values = c("#91979a", "#324249", "#273237"), name = "Depression Level at Year 1") +
  labs(x = "Educational Attainment at Injury (years)",
       y = "Distribution Density",
       fill = "Depression Level") +
  scale_x_continuous(breaks = seq(0, 25, by = 2)) +
  theme_ridges() +
  customization +
  theme(axis.title.x = element_text(hjust = 0.5, vjust = 0.5),
        axis.title.y = element_text(hjust = 0.5, vjust = 0.5),
        plot.background = element_rect(fill = "#FFFFFF", color = NA),
        legend.position = "right")

ggsave(here(univariate_and_bivariate_plots_dir, "figure_3-1_education_distribution_by_depression_complete_case_sample.png"),
       gg.education_by_depression, dpi = 300)
```

### Figures 4-1 and 4-2: Counts and Percentages of Medicaid Status by Depression Level at Year 1

```{r Plot Figure 4-1 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(rehab_payor_primary_type = factor(rehab_payor_primary_type, 
                                           levels = c("Non-Medicaid", 
                                                      "Medicaid")))

# Create the counts plot
# Filter out NA values in 'rehab_payor_primary_type' to display counts
medicaid_status_by_depression_data <- analytic_data_final |> 
  drop_na(rehab_payor_primary_type)

# Calculate the counts for each depression level group
count_data_medicaid_status <- medicaid_status_by_depression_data |>
  count(depression_level_at_year_1, rehab_payor_primary_type)

# Create the primary rehabilitation payor by depression level plot
gg.medicaid_status_by_depression <- ggplot(medicaid_status_by_depression_data,
                                           aes(x = depression_level_at_year_1,
                                               fill = rehab_payor_primary_type)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Non-Medicaid" = "#CFD8DC", 
                               "Medicaid" = "#37474F")) +
  geom_text(data = count_data_medicaid_status,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Medicaid Status") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 2500, by = 250)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_4-1_medicaid_status_by_depression_final_analytic_sample.png"),
       gg.medicaid_status_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 4-1 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(rehab_payor_primary_type = factor(rehab_payor_primary_type, 
                                           levels = c("Non-Medicaid", 
                                                      "Medicaid")))

# Create the counts plot
# Filter out NA values in 'rehab_payor_primary_type' to display counts
medicaid_status_by_depression_data <- complete_cases_select |> 
  drop_na(rehab_payor_primary_type)

# Calculate the counts for each depression level group
count_data_medicaid_status <- medicaid_status_by_depression_data |>
  count(depression_level_at_year_1, rehab_payor_primary_type)

# Create the primary rehabilitation payor by depression level plot
gg.medicaid_status_by_depression <- ggplot(medicaid_status_by_depression_data,
                                           aes(x = depression_level_at_year_1,
                                               fill = rehab_payor_primary_type)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Non-Medicaid" = "#CFD8DC", 
                               "Medicaid" = "#37474F")) +
  geom_text(data = count_data_medicaid_status,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Medicaid Status") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 500, by = 100)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_4-1_medicaid_status_by_depression_complete_case_sample.png"),
       gg.medicaid_status_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 4-2 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(rehab_payor_primary_type = factor(rehab_payor_primary_type, 
                                           levels = c("Non-Medicaid", 
                                                      "Medicaid")))

# Create the percentages plot
# Filter out NA values in 'rehab_payor_primary_type' and calculate percentages
medicaid_status_by_depression_pct_data <- analytic_data_final |> 
  drop_na(rehab_payor_primary_type, depression_level_at_year_1) |>
  count(depression_level_at_year_1, rehab_payor_primary_type) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the Medicaid status by depression level plot
gg.medicaid_status_by_depression_pct <- ggplot(medicaid_status_by_depression_pct_data,
                                               aes(x = depression_level_at_year_1,
                                                   y = pct,
                                                   fill = rehab_payor_primary_type)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Non-Medicaid" = "#CFD8DC",
                               "Medicaid" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,  # Position text in the middle of the bars
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "Primary Rehabilitation Payor Type") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 15)) +  # Set breaks at every 15%
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
    legend.margin = margin(t = 0, r = 0, b = 0, l = 0),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_4-2_medicaid_status_by_depression_pct_final_analytic_sample.png"),
       gg.medicaid_status_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 4-2 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(rehab_payor_primary_type = factor(rehab_payor_primary_type, 
                                           levels = c("Non-Medicaid", 
                                                      "Medicaid")))

# Create the percentages plot
# Filter out NA values in 'rehab_payor_primary_type' and calculate percentages
medicaid_status_by_depression_pct_data <- complete_cases_select |> 
  drop_na(rehab_payor_primary_type, depression_level_at_year_1) |>
  count(depression_level_at_year_1, rehab_payor_primary_type) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the Medicaid status by depression level plot
gg.medicaid_status_by_depression_pct <- ggplot(medicaid_status_by_depression_pct_data,
                                               aes(x = depression_level_at_year_1,
                                                   y = pct,
                                                   fill = rehab_payor_primary_type)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Non-Medicaid" = "#CFD8DC",
                               "Medicaid" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,  # Position text in the middle of the bars
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "Primary Rehabilitation Payor Type") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 15)) +  # Set breaks at every 15%
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right",
    legend.margin = margin(t = 0, r = 0, b = 0, l = 0),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_4-2_medicaid_status_by_depression_pct_complete_case_sample.png"),
       gg.medicaid_status_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

### Figures 5-1 and 5-2: Counts and Percentages of History of Mental Health Treatment by Year 1 Depression Level

```{r Plot Figure 5-1 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(mental_health_tx_hx = factor(mental_health_tx_hx, 
                                      levels = c("Denied any history of mental health treatment",
                                                 "Mental health treatment received prior to year preceding index injury only",
                                                 "Mental health treatment received within year preceding index injury")))

# Create the percentages plot
# Filter out NA values in 'mental_health_tx_hx' and calculate percentages
mental_health_tx_hx_by_depression_pct_data <- analytic_data_final |> 
  drop_na(mental_health_tx_hx, depression_level_at_year_1) |>
  count(depression_level_at_year_1, mental_health_tx_hx) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.mental_health_tx_hx_by_depression_pct <- ggplot(mental_health_tx_hx_by_depression_pct_data,
                                                   aes(x = depression_level_at_year_1,
                                                       y = pct,
                                                       fill = mental_health_tx_hx)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of mental health treatment" = "#CFD8DC", 
                               "Mental health treatment received prior to year preceding index injury only" = "#546E7A",
                               "Mental health treatment received within year preceding index injury" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,
            color = c("#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "History of Mental Health Treatment") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8.5),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_5-1_mental_health_tx_hx_by_depression_pct_final_analytic_sample.png"), 
       gg.mental_health_tx_hx_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 5-1 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(mental_health_tx_hx = factor(mental_health_tx_hx, 
                                      levels = c("Denied any history of mental health treatment",
                                                 "Mental health treatment received prior to year preceding index injury only",
                                                 "Mental health treatment received within year preceding index injury")))

# Create the percentages plot
# Filter out NA values in 'mental_health_tx_hx' and calculate percentages
mental_health_tx_hx_by_depression_pct_data <- complete_cases_select |> 
  drop_na(mental_health_tx_hx, depression_level_at_year_1) |>
  count(depression_level_at_year_1, mental_health_tx_hx) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.mental_health_tx_hx_by_depression_pct <- ggplot(mental_health_tx_hx_by_depression_pct_data,
                                                   aes(x = depression_level_at_year_1,
                                                       y = pct,
                                                       fill = mental_health_tx_hx)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of mental health treatment" = "#CFD8DC", 
                               "Mental health treatment received prior to year preceding index injury only" = "#546E7A",
                               "Mental health treatment received within year preceding index injury" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,
            color = c("#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF",
                      "#0C1011", "#FFFFFF", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "History of Mental Health Treatment") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 20)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8.5),
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_5-1_mental_health_tx_hx_by_depression_pct_complete_case_sample.png"), 
       gg.mental_health_tx_hx_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

### Figures 6-1 and 6-2: Counts and Percentages of Problematic Substance Use at Injury by Year 1 Depression Level

```{r Plot Figure 6-1 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(problematic_substance_use_at_injury = factor(problematic_substance_use_at_injury, 
                                                      levels = c("No",
                                                                 "Yes")))

# Filter out NA values in 'problematic_substance_use_at_injury' to display counts
problematic_substance_use_at_injury_by_depression_data <- analytic_data_final |> 
  drop_na(problematic_substance_use_at_injury)

# Calculate the counts for each depression level group
count_data_problematic_substance_use_at_injury <- problematic_substance_use_at_injury_by_depression_data |>
  count(depression_level_at_year_1, problematic_substance_use_at_injury)

# Create the counts plot
gg.problematic_substance_use_at_injury_by_depression <- ggplot(problematic_substance_use_at_injury_by_depression_data,
                                                               aes(x = depression_level_at_year_1,
                                                                   fill = problematic_substance_use_at_injury)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No" = "#CFD8DC", 
                               "Yes" = "#37474F")) +
  geom_text(data = count_data_problematic_substance_use_at_injury,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Problematic Substance Use at Injury") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1000, by = 100)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_6-1_problematic_substance_use_at_injury_by_depression_final_analytic_sample.png"),
       gg.problematic_substance_use_at_injury_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 6-1 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(problematic_substance_use_at_injury = factor(problematic_substance_use_at_injury, 
                                                      levels = c("No",
                                                                 "Yes")))

# Filter out NA values in 'problematic_substance_use_at_injury' to display counts
problematic_substance_use_at_injury_by_depression_data <- complete_cases_select |> 
  drop_na(problematic_substance_use_at_injury)

# Calculate the counts for each depression level group
count_data_problematic_substance_use_at_injury <- problematic_substance_use_at_injury_by_depression_data |>
  count(depression_level_at_year_1, problematic_substance_use_at_injury)

# Create the counts plot
gg.problematic_substance_use_at_injury_by_depression <- ggplot(problematic_substance_use_at_injury_by_depression_data,
                                                               aes(x = depression_level_at_year_1,
                                                                   fill = problematic_substance_use_at_injury)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No" = "#CFD8DC", 
                               "Yes" = "#37474F")) +
  geom_text(data = count_data_problematic_substance_use_at_injury,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "Problematic Substance Use at Injury") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1000, by = 100)) +
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_6-1_problematic_substance_use_at_injury_by_depression_complete_case_sample.png"),
       gg.problematic_substance_use_at_injury_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 6-2 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(problematic_substance_use_at_injury = factor(problematic_substance_use_at_injury, 
                                                      levels = c("No",
                                                                 "Yes")))

# Create the percentages plot
# Filter out NA values in 'problematic_substance_use_at_injury' and calculate percentages
problematic_substance_use_at_injury_by_depression_pct_data <- analytic_data_final |> 
  drop_na(problematic_substance_use_at_injury, depression_level_at_year_1) |>
  count(depression_level_at_year_1, problematic_substance_use_at_injury) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.problematic_substance_use_at_injury_by_depression_pct <- ggplot(problematic_substance_use_at_injury_by_depression_pct_data,
                                                                   aes(x = depression_level_at_year_1,
                                                                       y = pct,
                                                                       fill = problematic_substance_use_at_injury)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No" = "#CFD8DC", 
                               "Yes" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,  # Position text in the middle of the bars
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "Problematic Substance Use at Injury") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 10)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_6-2_problematic_substance_use_at_injury_by_depression_pct_final_analytic_sample.png"), 
       gg.problematic_substance_use_at_injury_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 6-2 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(problematic_substance_use_at_injury = factor(problematic_substance_use_at_injury, 
                                                      levels = c("No",
                                                                 "Yes")))

# Create the percentages plot
# Filter out NA values in 'problematic_substance_use_at_injury' and calculate percentages
problematic_substance_use_at_injury_by_depression_pct_data <- complete_cases_select |> 
  drop_na(problematic_substance_use_at_injury, depression_level_at_year_1) |>
  count(depression_level_at_year_1, problematic_substance_use_at_injury) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.problematic_substance_use_at_injury_by_depression_pct <- ggplot(problematic_substance_use_at_injury_by_depression_pct_data,
                                                                   aes(x = depression_level_at_year_1,
                                                                       y = pct,
                                                                       fill = problematic_substance_use_at_injury)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("No" = "#CFD8DC", 
                               "Yes" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2),  # Center text in the middle of each bar and format with one decimal place
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,  # Position text in the middle of the bars
            color = c("#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF",
                      "#0C1011", "#FFFFFF")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "Problematic Substance Use at Injury") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 10)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.justification = "right",
    legend.box.just = "right"
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_6-2_problematic_substance_use_at_injury_by_depression_pct_complete_case_sample.png"), 
       gg.problematic_substance_use_at_injury_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

### Figures 7-1 and 7-2: Counts and Percentages of History of Suicide Attempt by Year 1 Depression Level

```{r Plot Figure 7-1 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(suicide_attempt_hx = factor(suicide_attempt_hx, 
                                     levels = c("Denied any history of suicide attempt",
                                                "Suicide attempt history prior to injury",
                                                "Suicide attempt in the first year post-injury")))

# Filter out NA values in 'suicide_attempt_hx' to display counts
suicide_attempt_hx_by_depression_data <- analytic_data_final |> 
  drop_na(suicide_attempt_hx)

# Calculate the counts for each depression level group
count_data_suicide_attempt_hx <- suicide_attempt_hx_by_depression_data |>
  count(depression_level_at_year_1, suicide_attempt_hx)

# Create the counts plot
gg.suicide_attempt_hx_by_depression <- ggplot(suicide_attempt_hx_by_depression_data,
                                              aes(x = depression_level_at_year_1,
                                                  fill = suicide_attempt_hx)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of suicide attempt" = "#CFD8DC", 
                               "Suicide attempt history prior to injury" = "#546E7A",
                               "Suicide attempt in the first year post-injury" = "#37474F")) +
  geom_text(data = count_data_suicide_attempt_hx,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9), vjust = -1.75,
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,
            color = c("#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#0C1011", "#0C1011")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "History of Suicide Attempt") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1500, by = 200)) +
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8)
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_7-1_suicide_attempt_hx_by_depression_final_analytic_sample.png"),
       gg.suicide_attempt_hx_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 7-1 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(suicide_attempt_hx = factor(suicide_attempt_hx, 
                                     levels = c("Denied any history of suicide attempt",
                                                "Suicide attempt history prior to injury",
                                                "Suicide attempt in the first year post-injury")))

# Filter out NA values in 'suicide_attempt_hx' to display counts
suicide_attempt_hx_by_depression_data <- complete_cases_select |> 
  drop_na(suicide_attempt_hx)

# Calculate the counts for each depression level group
count_data_suicide_attempt_hx <- suicide_attempt_hx_by_depression_data |>
  count(depression_level_at_year_1, suicide_attempt_hx)

# Create the counts plot
gg.suicide_attempt_hx_by_depression <- ggplot(suicide_attempt_hx_by_depression_data,
                                              aes(x = depression_level_at_year_1,
                                                  fill = suicide_attempt_hx)) +
  geom_bar(position = position_dodge(), stat = "count", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of suicide attempt" = "#CFD8DC", 
                               "Suicide attempt history prior to injury" = "#546E7A",
                               "Suicide attempt in the first year post-injury" = "#37474F")) +
  geom_text(data = count_data_suicide_attempt_hx,
            aes(y = n/2, label = scales::comma(n)),  # Center text in the middle of each bar and format text with commas
            position = position_dodge(width = 0.9), vjust = -1.75,
            family = "Proxima Nova",
            fontface = "bold",
            size = 3,
            color = c("#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#0C1011", "#0C1011")) +
  labs(x = "Depression Level at Year 1", y = "Count", fill = "History of Suicide Attempt") +
  scale_y_continuous(labels = scales::comma, breaks = seq(0, 1500, by = 200)) +
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8)
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_7-1_suicide_attempt_hx_by_depression_complete_case_sample.png"),
       gg.suicide_attempt_hx_by_depression, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 7-2 (Final Analytic Sample)}
# Relevel the factor variable
analytic_data_final <- analytic_data_final |>
  mutate(suicide_attempt_hx = factor(suicide_attempt_hx, 
                                     levels = c("Denied any history of suicide attempt",
                                                "Suicide attempt history prior to injury",
                                                "Suicide attempt in the first year post-injury")))

# Create the percentages plot
# Filter out NA values in 'mental_health_tx_hx' and calculate percentages
suicide_attempt_hx_by_depression_pct_data <- analytic_data_final |> 
  drop_na(suicide_attempt_hx, depression_level_at_year_1) |>
  count(depression_level_at_year_1, suicide_attempt_hx) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.suicide_attempt_hx_by_depression_pct <- ggplot(suicide_attempt_hx_by_depression_pct_data,
                                                  aes(x = depression_level_at_year_1,
                                                      y = pct,
                                                      fill = suicide_attempt_hx)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of suicide attempt" = "#CFD8DC", 
                               "Suicide attempt history prior to injury" = "#546E7A",
                               "Suicide attempt in the first year post-injury" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2,  # Center text in the middle of each bar and format with one decimal place
                vjust = ifelse(pct <= 5.0, -2.0, 0.5)),
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,  # Position text in the middle of the bars
            color = c("#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#FFFFFF", "#0C1011",
                      "#0C1011", "#FFFFFF", "#0C1011")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "History of Suicide Attempt") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 10)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8)
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_7-2_suicide_attempt_hx_by_depression_pct_final_analytic_sample.png"), 
       gg.suicide_attempt_hx_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```

```{r Plot Figure 7-2 (Complete-Case Sample)}
# Relevel the factor variable
complete_cases_select <- complete_cases_select |>
  mutate(suicide_attempt_hx = factor(suicide_attempt_hx, 
                                     levels = c("Denied any history of suicide attempt",
                                                "Suicide attempt history prior to injury",
                                                "Suicide attempt in the first year post-injury")))

# Create the percentages plot
# Filter out NA values in 'mental_health_tx_hx' and calculate percentages
suicide_attempt_hx_by_depression_pct_data <- complete_cases_select |> 
  drop_na(suicide_attempt_hx, depression_level_at_year_1) |>
  count(depression_level_at_year_1, suicide_attempt_hx) |> 
  group_by(depression_level_at_year_1) |>
  mutate(pct = n / sum(n) * 100)

# Create the mechanism of injury by depression level percentages plot
gg.suicide_attempt_hx_by_depression_pct <- ggplot(suicide_attempt_hx_by_depression_pct_data,
                                                  aes(x = depression_level_at_year_1,
                                                      y = pct,
                                                      fill = suicide_attempt_hx)) +
  geom_bar(position = position_dodge(), stat = "identity", color = "#263238", linewidth = 0.75) +
  scale_fill_manual(values = c("Denied any history of suicide attempt" = "#CFD8DC", 
                               "Suicide attempt history prior to injury" = "#546E7A",
                               "Suicide attempt in the first year post-injury" = "#37474F")) +
  geom_text(aes(label = sprintf("%.1f%%", pct), y = pct / 2,  # Center text in the middle of each bar and format with one decimal place
                vjust = ifelse(pct <= 5.0, -2.0, 0.5)),
            position = position_dodge(width = 0.9),
            family = "Proxima Nova",
            fontface = "bold",
            size = 2.75,  # Position text in the middle of the bars
            color = c("#0C1011", "#0C1011", "#0C1011",
                      "#0C1011", "#FFFFFF", "#0C1011",
                      "#0C1011", "#FFFFFF", "#0C1011")) +
  labs(x = "Depression Level at Year 1", y = "Percentage", fill = "History of Suicide Attempt") +
  scale_y_continuous(labels = function(x) paste0(x, "%"),
                     breaks = seq(0, 100, by = 10)) +  # Set breaks at every 10%
  theme_classic() +
  customization +
  theme(
    legend.direction = "vertical",
    legend.background = element_rect(fill = "transparent"),
    legend.text = element_text(size = 8)
  )

# Save the plot
ggsave(here(univariate_and_bivariate_plots_dir, "figure_7-2_suicide_attempt_hx_by_depression_pct_complete_case_sample.png"), 
       gg.suicide_attempt_hx_by_depression_pct, bg = "#FFFFFF", dpi = 300)
```
